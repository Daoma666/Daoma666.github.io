[{"title":"JS清空数组的方法","url":"/2018/04/10/JS清空数组的方法/","content":"\n### ①splice\n```bash\n\tvar ary = [1,2,3,4]; \n\tary.splice(0); //不用写要删的长度，直接从0全删掉\n```\n\n### ②length=0\n```bash\n\tvar ary = [1,2,3,4]; \n\tary.length=0; \n```\n　　这种方式很有意思，其它语言如Java，其数组的length是只读的，不能被赋值。而JS中则可以。\n\n### ③赋值为[]\n```bash\n\tvar ary = [1,2,3,4]; \n\tary = []; // 赋值为一个空数组以达到清空原数组\n```\n　　方式2 保留了数组其它属性，方式3 则未保留。很多人认为方式2的效率很高些，因为仅仅是给length重新赋值了，而方式3则重新建立个对象。经 测试 恰恰是方式3的效率高。测试代码：\n```bash\n\tvar a=[];\n\tfor(var i=0;i<1000000;i++){\n\t\ta.push(i);\n\t}\n\tvar start=new Date();\n\ta=[];\n\tvar end=new Date();\n\talert(end-start);\n```\n　　可以多试几个浏览器，结果是方式3更快一点点。"},{"title":"内联元素和块元素","url":"/2018/04/07/内联元素和块元素/","content":"\n## 内联元素和块元素\n\n### ①块级元素:默认100%撑满外层盒子的宽度（浏览器显示区域），独占一行，垂直排列，里能用行内元素，可以设置宽高\n　　|-->div 没有任何CSS属性（主要用在大框架）\n　　|-->p     自带上下外边据  （用在段落）\n　　|-->h1-h6   自带上下外边据，自带字体大小（用在栏目大标题）\n　　|-->ul li       自带上下外边据，li自带圆点 （用在列表，多个元素大小一致）\n　　|-->dl dt dd   用在带标题的列表上 \n\n### ②行内元素（内联元素）:默认宽度只有本身所占的宽度，默认水平排列，不支持宽高 ，margin padding左右有效果 上下没有效果\n　　|-->a  超链接  自带标签颜色、鼠标放上颜色，点击时的颜色，点击过颜色，下划线\n　　|--> span \n　　|-->em、i（默认斜体）\n　　|-->strong,b（默认加粗）\n　　|-->u（默认下划线）\n   \n### ③行内块级元素:默认宽度只有本身所占的宽度，默认水平排列，支持宽高，受到父级text-align影响，可以居中\n　　|-->img 图片 \n　　|-->input 输入框\n　　|-->select  下拉菜单\n　　|-->textarea 输入区域\n\nIE6----------------BUG----------------------\n块级元素转化成行内块级元素   IE6不支持\n行内元素转化成行内块级元素 IE6支持\n\n块级元素加上position:absolute fixed（定位）或者浮动 宽度不是100% 是本身内容的宽度\n行内元素加上position:absolute fixed（定位）或者浮动  就会变成块级元素\n\n## display:block; display:inline;和display:inline-block;\n\n### block：使用此属性后，元素会被显示为块级元素，元素会进行换行，默认宽度为撑满外层盒子的宽度(因为块元素霸道)。\n### inline：使用此属性后，元素会被显示为内联元素，元素则不会换行，默认宽度为内容的宽度。\n### inline-block：是使元素以块级元素的形式呈现在行内。意思就是说，让这个元素显示在同一行不换行，但是又可以控制高度和宽度，这相当于行内元素的增强。\n　　应用：\n　　1.display:inline-block把一个元素变成块级元素，但他的大小只是他本身内容的大小并不撑满外围盒子，如下图所示：\n　　![图片放在GitHub仓库里了也显示不出来...](https://github.com/Daoma666/JS-CSS_train1/blob/master/img/display.jpg)所以在一道练习中出现下面的情况：\n```bash\n\t<li><a href=\"javascript:;\">手写</a></li>\n```\n　　若不把a变成块元素，则a上的背景不会撑满整个li。\n\n　　2.li是块元素，原本会换行，是竖着一列的布局，但改为inline-block并在父元素指定了width后，则会以块级元素的形式呈现在行内，不换行，但能控制高度宽度，这样就可以变成一行行排列的布局了。\n\n## css属性\n　　| ----------①盒子模型：width、height，padding、border、margin\n 　　　注意事项：padding 上下左右 全部相加       margin 上下取最大  左右相加     margin-top如想父级元素不受影响，父级元素要加overflow:hidden\n　　| ----------②-1 背景相关：background背景缩写:background-color,background-image,background-repeat,background-attachment,background-position\n　　| ----------②-2 文本样式：font-size文字大小/line-height行高、color文本颜色、text-align水平位置、font-family文字字体、letter-spcing文字间隔、text-decoration文本样式\n　　| ----------②-3 UL li：list-style列表样式\n　　| ----------②-4 A链接：a{}\n　　　　a:link - 普通的、未被访问的链接\n　　　　a:visited - 用户已访问的链接\n　　　　a:hover - 鼠标指针位于链接的上方\n　　　　a:active - 链接被点击的时刻\n　　| ----------③选择器    style 优先级最高  |   ID选择器   #xxx  id=\"xxx\"  |  类选择器 .xxx  class=\"xxx\"  |   元素选择器   p  | 后代选择器   .xxx .yyy\n　　| ----------④定位        float（浮动）  position（定位）：relative（相对）absolute（绝对）fixed（相对浏览器固定）"},{"title":"定位与浮动","url":"/2018/04/07/定位与浮动/","content":"\n## 元素加上浮动float后的影响\n\n　　0.float设计初衷就是为了实现文字环绕效果，[详情请见](http://www.cnblogs.com/liyunhua/p/4670908.html \"你所不了解的float(滥用float的怪异现象)\")\n　　1.浮动的参考对象：浮动的框可以向左或向右移动，直到它的外边缘碰到**包含框**或**另一个浮动框的边框**为止。\n　　2.父级元素受影响：该元素脱离文档流，使父级元素高度消失，在父级元素上加overflow:hidden 或 加height 或在父级元素上加一个clearfix类来修复父级元素的高度 (content 属性与 :before 及 :after 伪元素配合使用，定义元素之前或之后放置的生成内容。其中\\0020是空格的转义字符，一般直接写空格就行)\n```bash\n\t.clearfix:before, .clearfix:after { content: \"\\0020\"; display: block; height: 0; overflow: hidden; }  \n\t.clearfix:after { clear: both; }  \n\t.clearfix { zoom: 1; }  \n```\n　　3.设置了float的元素,**脱离了文档流，但没有脱离文本流**。也就是说当它后面还有元素时，其他元素会无视它所占据了的区域，直接在它身下布局。但是文字却会认同浮动元素所占据的区域，围绕它布局。 \n　　4.同级不加浮动的元素受影响：正常没加浮动的文档流元素，会无视该浮动元素   在没加浮动的元素上加 clear:both 来修复该元素上面浮动元素所占的高度\n\n## 定位详解\n\n　　值\t　　　　　　描述\n　　static\t　　　　默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。\n　　relative　　　位置被设置为 relative 的元素，可将其移至**相对于其本身**正常位置的地方，因此 \"left:20\" 会将元素移至元素正常位置左边 20 个像素的位置。\n　　absolute　　位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 **\"left\"、\"top\"、\"right\" 以及 \"bottom\" 属性**来规定。\n　　fixed　　　　位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 \"left\"、\"top\"、\"right\" 以及\"bottom\" 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。\n\n### 扩充详解　position:absolute\n\n　　这个顾名思义是绝对布局，在元素中设置之后，该元素会完全脱离文档流，它并不是相对于浏览器进行定位，**而是一层一层向上寻找父元素，直到寻找到第一个position不为static的祖先元素，它相对于这个祖先元素进行定位。**\n　　所以当你的父元素position:relative时，该子元素才会相对于你的父元素进行定位。如果任何一个祖先元素都没有设置position:relative，寻找到最外层的顶级元素html后自然不会继续寻找，所以这时才是相对于浏览器进行定位。\n　　我们可以看一个小例子：\nHTML:\n```bash\n\t<div id=\"outer\">\n\t\t<div id=\"inner\">\n\t\t\t<div id=\"deepinner\">\t\t\n\t\t\t</div>\n\t\t</div>\n\t</div>\n```\nCSS:\n```bash\n\t*{\n\t\tmargin: 0;\n\t\tpadding: 0;\t\n\t}\n\t#outer{\n\t\twidth: 500px;\n\t\theight: 500px;\n\t\tborder: 1px solid #000;\n\t\tmargin-left:100px;\n\t\tposition: relative;\n\t}\n\t#inner{\n\t\twidth:100px;\n\t\theight:100px;\n\t\tposition: absolute;\n\t\tborder: 1px solid red;\n\t\tleft: 100px;\n\t\ttop: 100px;\n\t}\n\t#deepinner{\n\t\twidth:100px;\n\t\theight: 100px;\n\t\tposition: absolute;\n\t\tborder: 1px solid red;\n\t\tleft: 50px;\n\t}\n```\n　　可以发现deepinner层相对与inner层偏移了50px，所以可以证明absolute是**一层一层向上寻找父元素，直到寻找到第一个position不为static的祖先元素，它相对于这个祖先元素进行定位。**，这里deepinner层相对的就是inner层。\n　　接着我又发现了一个小问题：\n```bash\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<title></title>\n\t\t\t<style type=\"text/css\">\n\t\t\t\t*{\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tpadding: 0;\t\n\t\t\t\t}\n\t\t\t\t#outer{\n\t\t\t\t\twidth: 500px;\n\t\t\t\t\theight: 500px;\n\t\t\t\t\tborder: 1px solid #000;\n\t\t\t\t\tmargin-left:100px;\n\t\t\t\t\tposition: relative;\n\t\t\t\t}\n\t\t\t\t#inner{\n\t\t\t\t\twidth:100px;\n\t\t\t\t\theight:100px;\n\t\t\t\t\t/*position: absolute;这里去掉*/\n\t\t\t\t\tborder: 1px solid blue;\n\t\t\t\t\tleft: 100px;\n\t\t\t\t\ttop: 100px;\n\t\t\t\t\tmargin-left: 200px;/*加上这个，以示区别*/\n\t\t\t\t}\n\t\t\t\t#deepinner{\n\t\t\t\t\twidth:100px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tborder: 1px solid red;\n\t\t\t\t\tleft: 50px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t\t<div id=\"outer\">\n\t\t\t\t<div id=\"inner\">\n\t\t\t\t\t<div id=\"deepinner\">\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</body>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar inner=document.getElementById(\"inner\");\n\t\t\tvar deep=document.getElementById(\"deepinner\");\n\t\t\talert(deep.offsetLeft);/*offsetLeft的用法*/\n\t\t</script>\n\t</html>\n```\n　　HTMLElement.offsetLeft 是一个只读属性，返回当前元素左上角相对于  HTMLElement.offsetParent 节点的左边界偏移的像素值。\n　　我原以为它会相对与它的父层但如上所示当元素设置定位后，offsetLeft寻找相对元素的方法与定位元素的寻找相对元素相同。\n\n　　1.父级设置（相对定位）relative - 子级设置（绝对定位）  absolute 必须加 left(right)   top(bottom) \n\n### 元素加上absolute和fixed后的影响\n\n　　1.宽度改变：该元素宽度变成设置的宽度，如果无则是内部元素所占的宽度   可以加宽度修复，也可以不加，就使用自身内容大小\n　　2.元素类型改变：内联元素可以变成块级元素。\n　　3.文档流影响：元素完全脱离文档流，**同级的定位，后写的在上层**，可以通过z-index 解决层级"},{"title":"JS中style,currentStyle和getComputedStyle的区别以及获取css操作方法","url":"/2018/04/06/JS中style-currentStyle和getComputedStyle的区别以及获取css操作方法/","content":"\n## JS中style,currentStyle和getComputedStyle的区别以及获取css操作方法\n\n　　首先需要了解CSS的三种使用方法：\n　　1.行内样式\n```bash\n\t<!doctype html>\n\t<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>css行内样式</title>\n\t</head>\n\t<body>\n\t<div style=\"width:100px;height:100px;background:red;\"></div>\n\t\t\n\t</body>\n\t</html>\n```\n　　2.内嵌样式\n```bash\n\t!doctype html>\n\t<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>css内嵌样式</title>\n\t</head>\n\t<body>\n\t<style type=\"text/css\">\n\t#div{width:100px;height:100px;background:red;}\n\t</style>\n\t<div id=\"div\"></div>\n\t\t\n\t</body>\n\t</html>\n```\n　　3.外部样式\n```bash\n\t<!doctype html>\n\t<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>css内嵌样式</title>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"XX.css\">\n\t</head>\n\t<body>\n\t<div id=\"div\"></div>\n\t\t\n\t</body>\n\t</html>\n```\n　　最近做了个小练习，点击h2想让ul元素在隐藏和显示中切换，但发现第一次点击总是无效，必须点到第二下以后才有想要的效果\nHTML:\n```bash\n\t<h2>播放列表...</h2>\n\t<ul>\n\t\t<li><a href=\"javascript:;\">玩家之徒 - 蔡依林</a></li>\n\t\t<li><a href=\"javascript:;\">原谅我就是这样的女生 - 戴佩妮</a></li>\n\t\t<li><a href=\"javascript:;\">猜不透 - 丁当</a></li>\n\t\t<li><a href=\"javascript:;\">自导自演 - 周杰伦</a></li>\n\t\t<li><a href=\"javascript:;\">浪漫窝 - 弦子</a></li>\n\t\t<li><a href=\"javascript:;\">流年 - 王菲</a></li>\n\t</ul>\n```\n\nJS:\n```bash\n\tvar oUl=document.getElementsByTagName(\"UL\")[0];\n\tvar oH2=document.getElementsByTagName(\"H2\")[0];\n\toH2.onclick=function(event){\n\t\toUl.style.display=oUl.style.display==\"block\"?\"none\":\"block\";\n\t}\n```\n\n　　原因为我以为ul默认为display:block; JS中的oUl.style.display能获取到block这个样式，但其实不然，**js的style属性只能获取行内样式**,所以一开始oUl.style.display=undefined，自然就不会第一下点击就隐藏了。\n　　解决方法是:在行内直接写入样式\n```bash\n\t<ul style=\"display: block;\">\n\t...\n\t</ul>\n```\n　　这样就能获取到了，所以在这里做一个总结：\n\n### ①style:各大浏览器都兼容,能设置样式和获取样式,但是获取不了外部样式,如果写了行内没有的样式,返回的是空值\n\n　　写法:ele.style.attr(获取),ele.style.attr=\"值\"(设置);\n　　注意只是获取不了外部样式，但可以设置外部样式。\n\n### currentStyle属性和getComputedStyle属性不能设置属性,只能获取\n### ②currentStyle:该属性只兼容IE,不兼容火狐和谷歌\n\n　　写法:ele.currentStyle[\"attr\"]或者ele.currentStyle.attr;\n\n### ③getComputedStyle:该属性是兼容火狐谷歌,不兼容IE9.0一下版本\n\n　　写法:window.getComputedStyle(ele,null)[attr]获取是window.getComputedStyle(ele,null).attr\n"},{"title":"网页导航栏小技巧","url":"/2018/04/03/网页导航栏小技巧/","content":"\n## 使用li+a构建网页导航栏\n\n　　首先说一下建导航栏时使用li+a而不是直接使用li的原因：一般导航都是具有超链接功能，a标签具有这个功能，而lis标签只是罗列信息列表，不具备链接功能。\n　　方法：一般我们在li中指定width，float;然后在a中使用display:block;再指定width和height，让它自动填充li即可。\n　　具体小例子见代码：\nHTML：\n```bash\n\t<div id=\"nav\">\n\t\t<ul>\n\t\t\t<li><a href=\"javascript:;\">站长之家</a></li>\n\t\t\t<li><a href=\"javascript:;\">行业资讯</a></li>\n\t\t\t<li><a href=\"javascript:;\">站长在线</a></li>\n\t\t\t<li><a href=\"javascript:;\">网站运营</a></li>\n\t\t\t<li><a href=\"javascript:;\">设计在线</a></li>\n\t\t\t<li><a href=\"javascript:;\">网络编程</a></li>\n\t\t\t<li><a href=\"javascript:;\">联盟资讯</a></li>\n\t\t\t<li><a href=\"javascript:;\">服务器</a></li>\n\t\t</ul>\n\t</div>\n```\nCSS：\n```bash\n\t#nav{\n\t\twidth: 730px;\n\t\tmargin: 20px auto;\n\t\tborder:1px solid blue;\n\t\tbackground: blue;\n\t}\n\t#nav ul{\n\t\tlist-style-type: none;\n\t\toverflow: hidden;\n\t\tmargin-left: 10px;\n\t}\n\t#nav ul li{\n\t\twidth: 80px;\n\t\tfloat: left;\n\t\tmargin-right: 10px;\t\t\t\n\t\tbackground: cornflowerblue;\n\t\tcursor: pointer;\n\t}\n\t#nav ul li a{\n\t\tdisplay: block;\n\t\twidth: 80px;\n\t\theight: 30px;\n\t\tline-height: 30px;\n\t\tpadding: 5px 0;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tcolor: #fff;\n\t}\n\t#nav ul li a:hover{\n\t\tfont-weight: 700;\n\t\tbackground: #aaa;\n\t}\n```\n　　麻雀虽小五脏俱全啊，涵盖了很多最近学到的知识点，算是在此纪念一下吧。"},{"title":"正则表达式摸门把级整理","url":"/2018/04/02/正则表达式摸门把级整理/","content":"\n### ①常用的元字符 (一些有特异功能的用来方便匹配的字符)\n\n　　代码　　说明\n　　.\t　　匹配除换行符以外的任意字符\n　　\\w　　匹配字母或数字或下划线或汉字\n　　\\s　　匹配任意的空白符\n　　\\d　　匹配数字\n　　\\b　　匹配单词的开始或结束\n　　^\t　　匹配字符串的开始\n　　$\t　　匹配字符串的结束\n\n　　^\\d{5,12}$　　因为使用了^和$，所以检测的整个字符串都要用来和\\d{5,12}来匹配，也就是说整个字符串必须是5到12个数字。\n\n### ②常用的限定符 (表示它前面的字符重复的次数)\n\n　　代码　　说明\n　　*\t　　重复零次或更多次\n　　+\t　　重复一次或更多次\n　　?\t　　重复零次或一次\n　　{n}　　重复n次\n　　{n,}　　重复n次或更多次\n　　{n,m}\t　重复n到m次\n\n　　\\(?0\\d{2}[) -]?\\d{8}　　首先是一个转义字符\\(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\\d{2})，然后是)或-或空格中的一个，它出现0次或1次(?)，最后是8个数字(\\d{8})。\n\n### ③字符范围 \n\n　　代码　　说明\n　　[]　　　　匹配方括号中任意字符\n　　[0-9]　　代表的含意与\\d就是完全一致的：匹配任意一位数字\n\n## ④分组\n\n　　代码　　说明\n　　()　　重复单个字符,直接在字符后面加上限定符就行了；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了\n\n　　(\\d{1,3}\\.){3}\\d{1,3}　　是一个简单的IP地址匹配表达式。  \\d{1,3}匹配1到3位的数字，(\\d{1,3}\\.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\\d{1,3})。\n\n　　具体请参考：[快速入门正则表达式](http://www.jb51.net/tools/zhengze.html \"快速入门正则表达式\")\n"},{"title":"加载图片的小技巧","url":"/2018/03/31/加载图片的小技巧/","content":"\n## image的onload事件和complete属性\n\n　　在做一个\"鼠标移过，修改图片路径\"作业的时候，想要附加一个功能：即图片不能显示的话，就给把该图片设置为一个替代的loading图片。\nHTML:\n```bash\n\t<li class=\"first\">\n\t\t<img src=\"img/big_1.jpg\">\n\t\t<div id=\"loading\" style=\"display: none;\"></div>\n\t</li>\n```\nJS:\n```bash\n\tfor(var i=1;i<oImg.length;i++){\n\t\toImg[i].onmousemove=function(){\n\t\t\tvar img=new Image();\n\t\t\timg.src=oImg[0].src=this.src.replace(/small/,\"big\");\n\t\t\tloading.style.display=\"block\";\n\t\t\timg.complete?loading.style.display=\"none\":oImg[0].onload=function(){\n\t\t\t\tloading.style.display=\"none\";\n\t\t\t}\n\t\t}\n\t}\n```\n　　在这里我们可以**用complete来判断图片是否加载完毕**，如果加载完毕，则把loading图片所在的那层隐藏掉。\n　　如果未加载完毕或遇到错误，则执行\n```bash\n\toImg[0].onload=function(){\n\t\tloading.style.display=\"none\";\n\t}\n```\n　　这里**onload事件表示等图片加载完成后要进行的操作**，所以接着上面的逻辑，则可以当图片加载完毕后再把loading图片所在层隐藏，若是图片出现错误，则会一直显示loading图片。\n\n　　大家可以注意到，代码里使用了*new image()*方法做图片预加载,用没有挂载到dom树上的img对象请求图片。请求成功后图片会被缓存，这时再给真实img元素的src赋值就可以直接使用缓存的图片了,优点是可以加快页面渲染速度。但只可惜我现在才疏学浅，并没看懂在该例中有啥用。。。"},{"title":"一些零星的JS，CSS知识","url":"/2018/03/27/一些零星的JS，CSS知识/","content":"\n## CSS 使用border画三角形\n\n　　盒模型中上下左右边框交界处呈现平滑的斜线. 利用这个特点, 通过设置不同的上下左右边框宽度或者颜色可以得到小三角, 小梯形等。[具体链接](http://caibaojian.com/css-border-triangle.html \"CSS三角形的实现原理及运用\")\n\n## CSS 实现居中的方法\n\n### 使用width和margin实现水平居中\n　　width指定完宽度，就可以直接margin:0 auto;实现左右居中了\n\n### 使用text-align实现水平居中\n　　使内联元素居中，所以要在想居中的内联元素的父元素中使用\n\n### 使用top,left和margin实现水平竖直的居中\n\n　　方法就是top: 50%;left: 50%;然后margin: -所在盒子宽度/2 0 0 -所在盒子高度/2;(可用于弹窗弹出到页面正中间)\n\n### 使用line-height实现文本垂直居中\n\n　　方法为：把line-height设置为父容器的高度就可以实现文本垂直居中。具体原理请见：[行高原理](https://www.imooc.com/article/7767 \"CSS行高（line-height）及文本垂直居中原理\")\n\n## js中{}大括号,[]中括号使用详解\n\n### { }大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。\n\n```bash\n\tvar mayun={\n\t\tname: \"cocl\",\n\t\tage: function(){\n\t\t\talert(\"21\");\n\t\t}\n\t}\n\tmayun.age();\n```\n\n### [ ]中括号，表示一个数组，也可以理解为一个数组对象。 \n"},{"title":"JS for-in语句的使用","url":"/2018/03/26/JS-for-in语句的使用/","content":"\n## JS for-in语句的使用\n\n　　*  js中for循环一般用于遍历数组\n　　*  for-in一般用于循环遍历对象的属性 \n　　虽然数组在js中也是对象，技术上说，我们可以使用for-in循环数组，如下：\n```bash\n\tvar oSkin=document.getElementById(\"skin\").getElementsByTagName(\"LI\");\n\tfor(var p in oSkin){\n\t\talert(p);\n\t}\n```\n　　此时输出(假设oSkin包含了3个LI)为0,1,2,length,item,namedItem，原因为：for-in如果遍历的是数组，那么i是代表这个数组的索引值，如果遍历的是个对象，那么i代表的是这个数组的属性值。因为oSkin是个HTTPCollection对象，所以它是一个对象数组里面装了3个LI对象，于是就会既有索引值，又有它自己的属性。\n　　所以要想遍历该数组的三个LI，需要：\n```bash\n\tfor(var p in oSkin){\n\t\toSkin[p].doSomeThing();\n\t}\n```\n　　题外话：今天在经过了主题制作者大佬的点拨下，准备趁着在学校的最后一个学期用*Socket.io+JS*写一个*聊天室系统*，这样也算有个项目可以去实习了哈哈(想的挺美，可惜现在写不出来)，所以还是要务实基础啊，加油！\n"},{"title":"CSS 使用overflow:hidden清除浮动","url":"/2018/03/26/CSS-使用overflow-hidden清除浮动/","content":"\n## CSS 使用overflow:hidden清除浮动\n\n　　今天做了一道网页换肤的练习，但发现了其中的两个小问题，详情如下：\n```bash\n\t<div id=\"outer\">\n\t\t<ul id=\"skin\">\n\t\t\t<li id=\"red\" title=\"红色\"></li>\n\t\t\t<li id=\"green\" title=\"绿色\"></li>\n\t\t\t<li id=\"blue\" title=\"蓝色\"></li>\n\t\t</ul>\n\t\t<ul id=\"nav\">\n\t\t\t\t<!--\n                \tjavascript: 是一个伪协议javascript:是表示在触发<a>默认动作时，执行一段JavaScript代码，\n                \t而 javascript:;表示什么都不执行，这样点击<a>时就没有任何反应。\n                -->\n\t\t\t\t<li><a href=\"javascript:;\">新闻</a></li>\n\t\t\t\t<li><a href=\"javascript:;\">娱乐</a></li>\n\t\t\t\t<li><a href=\"javascript:;\">体育</a></li>\n\t\t\t\t<li><a href=\"javascript:;\">电影</a></li>\n\t\t\t\t<li><a href=\"javascript:;\">音乐</a></li>\n\t\t\t\t<li><a href=\"javascript:;\">旅游</a></li>\n\t\t</ul>\n\t</div>\n```\n　　在div里有两个ul，对它们的li分别都设置了float: left后发现：\n　　1.  这两个ul中的li都脱离了文档流，跑到一行上去了\n　　2.  为ul设置过黑色背景，但都消失了\n　　于是我使用了br来换行，但发现原作者并没有这样做，这不由得让我产生了疑问。在反复查看源码后，我发现是overflow: hidden;在起作用，遂到网上一查发现，它并不只有**隐藏溢出**的功能，还有**清除浮动**和**解除坍塌**的功能。原理如下：\n　　浮动的元素(两个ul中的li)脱离文档元素， 不占据空间，所以跑到了一行上。 不浮动的元素(ul,div)会直接无视掉这个元素。因为我们没有设置父ul的高度，父ul无视了自己的两个孩子，其高度变为0，所以父ul没有显现。 解决方法就是：\n　　1.  如果只想换行，给ul添加overflow:hidden属性即可，清除浮动，恢复它原先占据的ul的位置\n　　2.  为父ul添加overflow:hidden属性用以清除浮动，使得父ul显现\n\n　　若想更细致的查看该属性的用法：[详细链接](https://blog.csdn.net/hukaihe/article/details/51298665 \"深入理解：overflow:hidden——溢出,坍塌,清除浮动\")\n"},{"title":"JS中&&和||的奇怪用法","url":"/2018/03/25/JS中-和-的奇怪用法/","content":"## JS中&&和||的奇怪用法\n\n　　最近正在学 JS，找了点练习来做，然后看到如下的代码：\n```bash\n\tfor (var i = 0; i < oBtn.length; i++)\n\t{\n\t\toBtn[i].index = i;\n\t\toBtn[i].onclick = function ()\n\t\t{\n\t\tthis.index == oBtn.length - 1 && (oDiv.style.cssText = \"\");\n\t\tchangeStyle(oDiv, oAtt[this.index], oVal[this.index]);\n\t\t}\n\t}\n```\n　　然后我上网搜了一下明白了 var c=a||b;或var c=a&&b;这种情况时\n**a && b :如果执行 a 后返回 true，则执行 b 并返回 b 的值；如果执行 a 后返回 false，则整个表达式返回 a 的值，b 不执行**\n**a || b :如果执行 a 后返回 true，则整个表达式返回 a 的值，b 不执行；如果执行 a 后返回 false，则执行 b 并返回 b 的值**\n\n　　所以这句就好理解了this.index == oBtn.length - 1 && (oDiv.style.cssText = \"\");\n　　这可以算是一种炫技代码⊙﹏⊙，相当于：\n```bash\n\tif(this.index == oBtn.length - 1){\n\t\toDiv.style.cssText = \"\";\n\t}\n```"},{"title":"A Front-end newbie","url":"/2018/03/25/A-Front-end-newbie/","content":"## 新手上路啦\n\n　　忙活了三天搭起了个人的博客，虽然只是开了一个框架，但看到属于自己的页面那一刻，心情是很激动的.作为一只准备投身前端领域的小菜鸟，这一个月越发的感受到了前端的魅力，也见识了前端的深邃，自己目前的水平也就是刚对JS和CSS入了门，上论坛看大家讨论的一堆名词连听都没听说过，所以革命还需努力啦！  \n　　鉴于目前已大三下学期，马上就要找实习了，故在文章最后分享一下最近看到一句话：“你第一个月的工资=你之前看过的所有技术性书籍价值的总和”，我感觉这是非常有道理的，小时候读书少，现在有动力读相关技术的书了，也算是一个好兆头。\n　　最后分享一下搭建博客的过程中用到的教程：\n　　1.  GitHub搭建博客 [具体教程](https://blog.csdn.net/u012075670/article/details/54581015 \"如何用github搭建自己的个人网站\")\n　　2.  Hexo完善博客       [具体教程](https://www.cnblogs.com/visugar/p/6821777.html \"hexo从零开始到搭建完整\")\n　　3.  使用markdown来写博客(ps:要是想要段首缩进可以切换到输入法全角模式打两个空格) [语法参考](https://www.w3cschool.cn/markdownyfsm/cbx1e7.html \"Markdown 语法说明\")\n　　那今天就先到这里啦，我们下篇博客再会！\n"},{"title":"Hello World","url":"/2018/03/24/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n\n### Generate static files\n\n``` bash\n$ hexo generate or $ hexo g\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Debug\n\n``` bash\n$ hexo s --debug\n```\n\nMore info: [Server](https://hexo.io/zh-cn/docs/commands.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy or $ hexo d\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岛马的主页</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-11T11:38:52.899Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>岛马</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>text-indent: -9999px;作用</title>
    <link href="http://yoursite.com/2018/04/11/text-indent-9999px-%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/11/text-indent-9999px-作用/</id>
    <published>2018-04-11T11:37:57.000Z</published>
    <updated>2018-04-11T11:38:52.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="text-indent-9999px-作用"><a href="#text-indent-9999px-作用" class="headerlink" title="text-indent: -9999px;作用"></a>text-indent: -9999px;作用</h2><p>　　最近在做星级评分系统作业时遇到了这个写法。<br>HTML:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;点击星星就能打分&lt;/span&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li class=<span class="string">""</span>&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=<span class="string">""</span>&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=<span class="string">""</span>&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=<span class="string">""</span>&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;4&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=<span class="string">""</span>&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;5&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#star li&#123;</span></span><br><span class="line">width: 24px;</span><br><span class="line"><span class="built_in">float</span>: left;</span><br><span class="line">cursor: pointer;</span><br><span class="line">text-indent: -9999px;/*&lt;a&gt;之间有文字，有时为了搜索引擎需要,但我们实际的星星上不想要文字，则添加了这个属性隐藏它*/</span><br><span class="line">background: url(img/star.png) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　text-indent:-9999px 一般用于隐藏文字。比如LOGO 部分，因为SEO(Search Engine Optimization)搜索引擎优化 的需要，所以要有文字在，但事实上显示的时候用了图片代替，所以就要使用text-indent:-9999px; 把它从界面上隐藏掉。<br>　　text-indent 是缩进，使用9999 是为了让他的缩进足够大，大分辨率下也能缩到不见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;text-indent-9999px-作用&quot;&gt;&lt;a href=&quot;#text-indent-9999px-作用&quot; class=&quot;headerlink&quot; title=&quot;text-indent: -9999px;作用&quot;&gt;&lt;/a&gt;text-indent: -9999px;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>offsetLeft和style.left</title>
    <link href="http://yoursite.com/2018/04/11/offsetLeft%E5%92%8Cstyle-left/"/>
    <id>http://yoursite.com/2018/04/11/offsetLeft和style-left/</id>
    <published>2018-04-11T11:34:36.000Z</published>
    <updated>2018-04-11T11:41:47.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="offsetLeft和style-left"><a href="#offsetLeft和style-left" class="headerlink" title="offsetLeft和style.left"></a>offsetLeft和style.left</h2><h3 id="offsetLeft"><a href="#offsetLeft" class="headerlink" title="offsetLeft"></a>offsetLeft</h3><p>　　1.如果父辈元素中有定位的元素，那么就返回距离当前元素最近的定位元素边缘的距离。<br>　　2.如果父辈元素中没有定位元素，那么就返回相对于body左边缘距离。</p><h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h3><p>　　1. style.left 返回的是字符串，如28px，offsetLeft返回的是数值28，如果需要对取得的值进行计算，还用offsetLeft比较方便。<br>　　2. style.left是读写的，offsetLeft是只读的，所以要改变元素的位置，只能修改style.left。<br>　　3. style.left的值需要事先定义，否则取到的值为空。而且必须要定义在html里，offsetLeft的值随时可以取到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;offsetLeft和style-left&quot;&gt;&lt;a href=&quot;#offsetLeft和style-left&quot; class=&quot;headerlink&quot; title=&quot;offsetLeft和style.left&quot;&gt;&lt;/a&gt;offsetLeft和style.left&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS清空数组的方法</title>
    <link href="http://yoursite.com/2018/04/10/JS%E6%B8%85%E7%A9%BA%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/10/JS清空数组的方法/</id>
    <published>2018-04-10T11:55:32.000Z</published>
    <updated>2018-04-10T12:09:40.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="①splice"><a href="#①splice" class="headerlink" title="①splice"></a>①splice</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var ary = [1,2,3,4]; </span><br><span class="line">ary.splice(0); //不用写要删的长度，直接从0全删掉</span><br></pre></td></tr></table></figure><h3 id="②length-0"><a href="#②length-0" class="headerlink" title="②length=0"></a>②length=0</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var ary = [1,2,3,4]; </span><br><span class="line">ary.length=0;</span><br></pre></td></tr></table></figure><p>　　这种方式很有意思，其它语言如Java，其数组的length是只读的，不能被赋值。而JS中则可以。</p><h3 id="③赋值为"><a href="#③赋值为" class="headerlink" title="③赋值为[]"></a>③赋值为[]</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var ary = [1,2,3,4]; </span><br><span class="line">ary = []; // 赋值为一个空数组以达到清空原数组</span><br></pre></td></tr></table></figure><p>　　方式2 保留了数组其它属性，方式3 则未保留。很多人认为方式2的效率很高些，因为仅仅是给length重新赋值了，而方式3则重新建立个对象。经 测试 恰恰是方式3的效率高。测试代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a=[];</span><br><span class="line"><span class="keyword">for</span>(var i=0;i&lt;1000000;i++)&#123;</span><br><span class="line">a.push(i);</span><br><span class="line">&#125;</span><br><span class="line">var start=new Date();</span><br><span class="line">a=[];</span><br><span class="line">var end=new Date();</span><br><span class="line">alert(end-start);</span><br></pre></td></tr></table></figure></p><p>　　可以多试几个浏览器，结果是方式3更快一点点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;①splice&quot;&gt;&lt;a href=&quot;#①splice&quot; class=&quot;headerlink&quot; title=&quot;①splice&quot;&gt;&lt;/a&gt;①splice&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内联元素和块元素</title>
    <link href="http://yoursite.com/2018/04/07/%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E5%92%8C%E5%9D%97%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2018/04/07/内联元素和块元素/</id>
    <published>2018-04-07T11:12:03.000Z</published>
    <updated>2018-04-07T11:12:11.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内联元素和块元素"><a href="#内联元素和块元素" class="headerlink" title="内联元素和块元素"></a>内联元素和块元素</h2><h3 id="①块级元素-默认100-撑满外层盒子的宽度（浏览器显示区域），独占一行，垂直排列，里能用行内元素，可以设置宽高"><a href="#①块级元素-默认100-撑满外层盒子的宽度（浏览器显示区域），独占一行，垂直排列，里能用行内元素，可以设置宽高" class="headerlink" title="①块级元素:默认100%撑满外层盒子的宽度（浏览器显示区域），独占一行，垂直排列，里能用行内元素，可以设置宽高"></a>①块级元素:默认100%撑满外层盒子的宽度（浏览器显示区域），独占一行，垂直排列，里能用行内元素，可以设置宽高</h3><p>　　|–&gt;div 没有任何CSS属性（主要用在大框架）<br>　　|–&gt;p     自带上下外边据  （用在段落）<br>　　|–&gt;h1-h6   自带上下外边据，自带字体大小（用在栏目大标题）<br>　　|–&gt;ul li       自带上下外边据，li自带圆点 （用在列表，多个元素大小一致）<br>　　|–&gt;dl dt dd   用在带标题的列表上 </p><h3 id="②行内元素（内联元素）-默认宽度只有本身所占的宽度，默认水平排列，不支持宽高-，margin-padding左右有效果-上下没有效果"><a href="#②行内元素（内联元素）-默认宽度只有本身所占的宽度，默认水平排列，不支持宽高-，margin-padding左右有效果-上下没有效果" class="headerlink" title="②行内元素（内联元素）:默认宽度只有本身所占的宽度，默认水平排列，不支持宽高 ，margin padding左右有效果 上下没有效果"></a>②行内元素（内联元素）:默认宽度只有本身所占的宽度，默认水平排列，不支持宽高 ，margin padding左右有效果 上下没有效果</h3><p>　　|–&gt;a  超链接  自带标签颜色、鼠标放上颜色，点击时的颜色，点击过颜色，下划线<br>　　|–&gt; span<br>　　|–&gt;em、i（默认斜体）<br>　　|–&gt;strong,b（默认加粗）<br>　　|–&gt;u（默认下划线）</p><h3 id="③行内块级元素-默认宽度只有本身所占的宽度，默认水平排列，支持宽高，受到父级text-align影响，可以居中"><a href="#③行内块级元素-默认宽度只有本身所占的宽度，默认水平排列，支持宽高，受到父级text-align影响，可以居中" class="headerlink" title="③行内块级元素:默认宽度只有本身所占的宽度，默认水平排列，支持宽高，受到父级text-align影响，可以居中"></a>③行内块级元素:默认宽度只有本身所占的宽度，默认水平排列，支持宽高，受到父级text-align影响，可以居中</h3><p>　　|–&gt;img 图片<br>　　|–&gt;input 输入框<br>　　|–&gt;select  下拉菜单<br>　　|–&gt;textarea 输入区域</p><p>IE6—————-BUG———————-<br>块级元素转化成行内块级元素   IE6不支持<br>行内元素转化成行内块级元素 IE6支持</p><p>块级元素加上position:absolute fixed（定位）或者浮动 宽度不是100% 是本身内容的宽度<br>行内元素加上position:absolute fixed（定位）或者浮动  就会变成块级元素</p><h2 id="display-block-display-inline-和display-inline-block"><a href="#display-block-display-inline-和display-inline-block" class="headerlink" title="display:block; display:inline;和display:inline-block;"></a>display:block; display:inline;和display:inline-block;</h2><h3 id="block：使用此属性后，元素会被显示为块级元素，元素会进行换行，默认宽度为撑满外层盒子的宽度-因为块元素霸道-。"><a href="#block：使用此属性后，元素会被显示为块级元素，元素会进行换行，默认宽度为撑满外层盒子的宽度-因为块元素霸道-。" class="headerlink" title="block：使用此属性后，元素会被显示为块级元素，元素会进行换行，默认宽度为撑满外层盒子的宽度(因为块元素霸道)。"></a>block：使用此属性后，元素会被显示为块级元素，元素会进行换行，默认宽度为撑满外层盒子的宽度(因为块元素霸道)。</h3><h3 id="inline：使用此属性后，元素会被显示为内联元素，元素则不会换行，默认宽度为内容的宽度。"><a href="#inline：使用此属性后，元素会被显示为内联元素，元素则不会换行，默认宽度为内容的宽度。" class="headerlink" title="inline：使用此属性后，元素会被显示为内联元素，元素则不会换行，默认宽度为内容的宽度。"></a>inline：使用此属性后，元素会被显示为内联元素，元素则不会换行，默认宽度为内容的宽度。</h3><h3 id="inline-block：是使元素以块级元素的形式呈现在行内。意思就是说，让这个元素显示在同一行不换行，但是又可以控制高度和宽度，这相当于行内元素的增强。"><a href="#inline-block：是使元素以块级元素的形式呈现在行内。意思就是说，让这个元素显示在同一行不换行，但是又可以控制高度和宽度，这相当于行内元素的增强。" class="headerlink" title="inline-block：是使元素以块级元素的形式呈现在行内。意思就是说，让这个元素显示在同一行不换行，但是又可以控制高度和宽度，这相当于行内元素的增强。"></a>inline-block：是使元素以块级元素的形式呈现在行内。意思就是说，让这个元素显示在同一行不换行，但是又可以控制高度和宽度，这相当于行内元素的增强。</h3><p>　　应用：<br>　　1.display:inline-block把一个元素变成块级元素，但他的大小只是他本身内容的大小并不撑满外围盒子，如下图所示：<br>　　<img src="https://github.com/Daoma666/JS-CSS_train1/blob/master/img/display.jpg" alt="图片放在GitHub仓库里了也显示不出来...">所以在一道练习中出现下面的情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;手写&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>　　若不把a变成块元素，则a上的背景不会撑满整个li。</p><p>　　2.li是块元素，原本会换行，是竖着一列的布局，但改为inline-block并在父元素指定了width后，则会以块级元素的形式呈现在行内，不换行，但能控制高度宽度，这样就可以变成一行行排列的布局了。</p><h2 id="css属性"><a href="#css属性" class="headerlink" title="css属性"></a>css属性</h2><p>　　| ———-①盒子模型：width、height，padding、border、margin<br> 　　　注意事项：padding 上下左右 全部相加       margin 上下取最大  左右相加     margin-top如想父级元素不受影响，父级元素要加overflow:hidden<br>　　| ———-②-1 背景相关：background背景缩写:background-color,background-image,background-repeat,background-attachment,background-position<br>　　| ———-②-2 文本样式：font-size文字大小/line-height行高、color文本颜色、text-align水平位置、font-family文字字体、letter-spcing文字间隔、text-decoration文本样式<br>　　| ———-②-3 UL li：list-style列表样式<br>　　| ———-②-4 A链接：a{}<br>　　　　a:link - 普通的、未被访问的链接<br>　　　　a:visited - 用户已访问的链接<br>　　　　a:hover - 鼠标指针位于链接的上方<br>　　　　a:active - 链接被点击的时刻<br>　　| ———-③选择器    style 优先级最高  |   ID选择器   #xxx  id=”xxx”  |  类选择器 .xxx  class=”xxx”  |   元素选择器   p  | 后代选择器   .xxx .yyy<br>　　| ———-④定位        float（浮动）  position（定位）：relative（相对）absolute（绝对）fixed（相对浏览器固定）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内联元素和块元素&quot;&gt;&lt;a href=&quot;#内联元素和块元素&quot; class=&quot;headerlink&quot; title=&quot;内联元素和块元素&quot;&gt;&lt;/a&gt;内联元素和块元素&lt;/h2&gt;&lt;h3 id=&quot;①块级元素-默认100-撑满外层盒子的宽度（浏览器显示区域），独占一行，垂直排列，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>定位与浮动</title>
    <link href="http://yoursite.com/2018/04/07/%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/04/07/定位与浮动/</id>
    <published>2018-04-07T09:30:27.000Z</published>
    <updated>2018-04-11T11:33:21.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素加上浮动float后的影响"><a href="#元素加上浮动float后的影响" class="headerlink" title="元素加上浮动float后的影响"></a>元素加上浮动float后的影响</h2><p>　　0.float设计初衷就是为了实现文字环绕效果，<a href="http://www.cnblogs.com/liyunhua/p/4670908.html" title="你所不了解的float(滥用float的怪异现象)" target="_blank" rel="noopener">详情请见</a><br>　　1.浮动的参考对象：浮动的框可以向左或向右移动，直到它的外边缘碰到<strong>包含框</strong>或<strong>另一个浮动框的边框</strong>为止。<br>　　2.父级元素受影响：该元素脱离文档流，使父级元素高度消失，在父级元素上加overflow:hidden 或 加height 或在父级元素上加一个clearfix类来修复父级元素的高度 (content 属性与 :before 及 :after 伪元素配合使用，定义元素之前或之后放置的生成内容。其中\0020是空格的转义字符，一般直接写空格就行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before, .clearfix:after &#123; content: <span class="string">"\0020"</span>; display: block; height: 0; overflow: hidden; &#125;  </span><br><span class="line">.clearfix:after &#123; clear: both; &#125;  </span><br><span class="line">.clearfix &#123; zoom: 1; &#125;</span><br></pre></td></tr></table></figure></p><p>　　3.设置了float的元素,<strong>脱离了文档流，但没有脱离文本流</strong>。也就是说当它后面还有元素时，其他元素会无视它所占据了的区域，直接在它身下布局。但是文字却会认同浮动元素所占据的区域，围绕它布局。<br>　　4.同级不加浮动的元素受影响：正常没加浮动的文档流元素，会无视该浮动元素   在没加浮动的元素上加 clear:both 来修复该元素上面浮动元素所占的高度</p><h2 id="定位详解"><a href="#定位详解" class="headerlink" title="定位详解"></a>定位详解</h2><p>　　值    　　　　　　描述<br>　　static    　　　　默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。<br>　　relative　　　位置被设置为 relative 的元素，可将其移至<strong>相对于其本身</strong>正常位置的地方，因此 “left:20” 会将元素移至元素正常位置左边 20 个像素的位置。<br>　　absolute　　位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 <strong>“left”、”top”、”right” 以及 “bottom” 属性</strong>来规定。<br>　　fixed　　　　位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。</p><h3 id="扩充详解-position-absolute"><a href="#扩充详解-position-absolute" class="headerlink" title="扩充详解　position:absolute"></a>扩充详解　position:absolute</h3><p>　　这个顾名思义是绝对布局，在元素中设置之后，该元素会完全脱离文档流，它并不是相对于浏览器进行定位，<strong>而是一层一层向上寻找父元素，直到寻找到第一个position不为static的祖先元素，它相对于这个祖先元素进行定位。</strong><br>　　所以当你的父元素position:relative时，该子元素才会相对于你的父元素进行定位。如果任何一个祖先元素都没有设置position:relative，寻找到最外层的顶级元素html后自然不会继续寻找，所以这时才是相对于浏览器进行定位。<br>　　我们可以看一个小例子：<br>HTML:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"outer"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"inner"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"deepinner"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#outer&#123;</span></span><br><span class="line">width: 500px;</span><br><span class="line">height: 500px;</span><br><span class="line">border: 1px solid <span class="comment">#000;</span></span><br><span class="line">margin-left:100px;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#inner&#123;</span></span><br><span class="line">width:100px;</span><br><span class="line">height:100px;</span><br><span class="line">position: absolute;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">left: 100px;</span><br><span class="line">top: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#deepinner&#123;</span></span><br><span class="line">width:100px;</span><br><span class="line">height: 100px;</span><br><span class="line">position: absolute;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">left: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　可以发现deepinner层相对与inner层偏移了50px，所以可以证明absolute是<strong>一层一层向上寻找父元素，直到寻找到第一个position不为static的祖先元素，它相对于这个祖先元素进行定位。</strong>，这里deepinner层相对的就是inner层。</p><h3 id="元素加上absolute和fixed后的影响"><a href="#元素加上absolute和fixed后的影响" class="headerlink" title="元素加上absolute和fixed后的影响"></a>元素加上absolute和fixed后的影响</h3><p>　　1.宽度改变：该元素宽度变成设置的宽度，如果无则是内部元素所占的宽度   可以加宽度修复，也可以不加，就使用自身内容大小<br>　　2.元素类型改变：内联元素可以变成块级元素。<br>　　3.文档流影响：元素完全脱离文档流，<strong>同级的定位，后写的在上层</strong>，可以通过z-index 解决层级</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元素加上浮动float后的影响&quot;&gt;&lt;a href=&quot;#元素加上浮动float后的影响&quot; class=&quot;headerlink&quot; title=&quot;元素加上浮动float后的影响&quot;&gt;&lt;/a&gt;元素加上浮动float后的影响&lt;/h2&gt;&lt;p&gt;　　0.float设计初衷就是为了实
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS中style,currentStyle和getComputedStyle的区别以及获取css操作方法</title>
    <link href="http://yoursite.com/2018/04/06/JS%E4%B8%ADstyle-currentStyle%E5%92%8CgetComputedStyle%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E8%8E%B7%E5%8F%96css%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/06/JS中style-currentStyle和getComputedStyle的区别以及获取css操作方法/</id>
    <published>2018-04-06T08:55:16.000Z</published>
    <updated>2018-04-06T09:43:12.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS中style-currentStyle和getComputedStyle的区别以及获取css操作方法"><a href="#JS中style-currentStyle和getComputedStyle的区别以及获取css操作方法" class="headerlink" title="JS中style,currentStyle和getComputedStyle的区别以及获取css操作方法"></a>JS中style,currentStyle和getComputedStyle的区别以及获取css操作方法</h2><p>　　首先需要了解CSS的三种使用方法：<br>　　1.行内样式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;css行内样式&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;background:red;"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>　　2.内嵌样式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;css内嵌样式&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line"><span class="comment">#div&#123;width:100px;height:100px;background:red;&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=<span class="string">"div"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>　　3.外部样式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;css内嵌样式&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"XX.css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"div"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>　　最近做了个小练习，点击h2想让ul元素在隐藏和显示中切换，但发现第一次点击总是无效，必须点到第二下以后才有想要的效果<br>HTML:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;播放列表...&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;玩家之徒 - 蔡依林&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;原谅我就是这样的女生 - 戴佩妮&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;猜不透 - 丁当&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;自导自演 - 周杰伦&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;浪漫窝 - 弦子&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;流年 - 王菲&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>JS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var oUl=document.getElementsByTagName(<span class="string">"UL"</span>)[0];</span><br><span class="line">var oH2=document.getElementsByTagName(<span class="string">"H2"</span>)[0];</span><br><span class="line">oH2.onclick=<span class="keyword">function</span>(event)&#123;</span><br><span class="line">oUl.style.display=oUl.style.display==<span class="string">"block"</span>?<span class="string">"none"</span>:<span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　原因为我以为ul默认为display:block; JS中的oUl.style.display能获取到block这个样式，但其实不然，<strong>js的style属性只能获取行内样式</strong>,所以一开始oUl.style.display=undefined，自然就不会第一下点击就隐藏了。<br>　　解决方法是:在行内直接写入样式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=<span class="string">"display: block;"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>　　这样就能获取到了，所以在这里做一个总结：</p><h3 id="①style-各大浏览器都兼容-能设置样式和获取样式-但是获取不了外部样式-如果写了行内没有的样式-返回的是空值"><a href="#①style-各大浏览器都兼容-能设置样式和获取样式-但是获取不了外部样式-如果写了行内没有的样式-返回的是空值" class="headerlink" title="①style:各大浏览器都兼容,能设置样式和获取样式,但是获取不了外部样式,如果写了行内没有的样式,返回的是空值"></a>①style:各大浏览器都兼容,能设置样式和获取样式,但是获取不了外部样式,如果写了行内没有的样式,返回的是空值</h3><p>　　写法:ele.style.attr(获取),ele.style.attr=”值”(设置);<br>　　注意只是获取不了外部样式，但可以设置外部样式。</p><h3 id="currentStyle属性和getComputedStyle属性不能设置属性-只能获取"><a href="#currentStyle属性和getComputedStyle属性不能设置属性-只能获取" class="headerlink" title="currentStyle属性和getComputedStyle属性不能设置属性,只能获取"></a>currentStyle属性和getComputedStyle属性不能设置属性,只能获取</h3><h3 id="②currentStyle-该属性只兼容IE-不兼容火狐和谷歌"><a href="#②currentStyle-该属性只兼容IE-不兼容火狐和谷歌" class="headerlink" title="②currentStyle:该属性只兼容IE,不兼容火狐和谷歌"></a>②currentStyle:该属性只兼容IE,不兼容火狐和谷歌</h3><p>　　写法:ele.currentStyle[“attr”]或者ele.currentStyle.attr;</p><h3 id="③getComputedStyle-该属性是兼容火狐谷歌-不兼容IE9-0一下版本"><a href="#③getComputedStyle-该属性是兼容火狐谷歌-不兼容IE9-0一下版本" class="headerlink" title="③getComputedStyle:该属性是兼容火狐谷歌,不兼容IE9.0一下版本"></a>③getComputedStyle:该属性是兼容火狐谷歌,不兼容IE9.0一下版本</h3><p>　　写法:window.getComputedStyle(ele,null)[attr]获取是window.getComputedStyle(ele,null).attr</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS中style-currentStyle和getComputedStyle的区别以及获取css操作方法&quot;&gt;&lt;a href=&quot;#JS中style-currentStyle和getComputedStyle的区别以及获取css操作方法&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网页导航栏小技巧</title>
    <link href="http://yoursite.com/2018/04/03/%E7%BD%91%E9%A1%B5%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/04/03/网页导航栏小技巧/</id>
    <published>2018-04-03T14:24:25.000Z</published>
    <updated>2018-04-05T09:08:09.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用li-a构建网页导航栏"><a href="#使用li-a构建网页导航栏" class="headerlink" title="使用li+a构建网页导航栏"></a>使用li+a构建网页导航栏</h2><p>　　首先说一下建导航栏时使用li+a而不是直接使用li的原因：一般导航都是具有超链接功能，a标签具有这个功能，而lis标签只是罗列信息列表，不具备链接功能。<br>　　方法：一般我们在li中指定width，float;然后在a中使用display:block;再指定width和height，让它自动填充li即可。<br>　　具体小例子见代码：<br>HTML：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"nav"</span>&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;站长之家&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;行业资讯&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;站长在线&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;网站运营&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;设计在线&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;网络编程&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;联盟资讯&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;服务器&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nav&#123;</span></span><br><span class="line">width: 730px;</span><br><span class="line">margin: 20px auto;</span><br><span class="line">border:1px solid blue;</span><br><span class="line">background: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#nav ul&#123;</span></span><br><span class="line">list-style-type: none;</span><br><span class="line">overflow: hidden;</span><br><span class="line">margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#nav ul li&#123;</span></span><br><span class="line">width: 80px;</span><br><span class="line"><span class="built_in">float</span>: left;</span><br><span class="line">margin-right: 10px;</span><br><span class="line">background: cornflowerblue;</span><br><span class="line">cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#nav ul li a&#123;</span></span><br><span class="line">display: block;</span><br><span class="line">width: 80px;</span><br><span class="line">height: 30px;</span><br><span class="line">line-height: 30px;</span><br><span class="line">padding: 5px 0;</span><br><span class="line">text-align: center;</span><br><span class="line">text-decoration: none;</span><br><span class="line">color: <span class="comment">#fff;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#nav ul li a:hover&#123;</span></span><br><span class="line">font-weight: 700;</span><br><span class="line">background: <span class="comment">#aaa;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　麻雀虽小五脏俱全啊，涵盖了很多最近学到的知识点，算是在此纪念一下吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用li-a构建网页导航栏&quot;&gt;&lt;a href=&quot;#使用li-a构建网页导航栏&quot; class=&quot;headerlink&quot; title=&quot;使用li+a构建网页导航栏&quot;&gt;&lt;/a&gt;使用li+a构建网页导航栏&lt;/h2&gt;&lt;p&gt;　　首先说一下建导航栏时使用li+a而不是直接使用l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式摸门把级整理</title>
    <link href="http://yoursite.com/2018/04/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%91%B8%E9%97%A8%E6%8A%8A%E7%BA%A7%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/02/正则表达式摸门把级整理/</id>
    <published>2018-04-02T12:45:27.000Z</published>
    <updated>2018-04-02T12:51:21.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="①常用的元字符-一些有特异功能的用来方便匹配的字符"><a href="#①常用的元字符-一些有特异功能的用来方便匹配的字符" class="headerlink" title="①常用的元字符 (一些有特异功能的用来方便匹配的字符)"></a>①常用的元字符 (一些有特异功能的用来方便匹配的字符)</h3><p>　　代码　　说明<br>　　.    　　匹配除换行符以外的任意字符<br>　　\w　　匹配字母或数字或下划线或汉字<br>　　\s　　匹配任意的空白符<br>　　\d　　匹配数字<br>　　\b　　匹配单词的开始或结束<br>　　^    　　匹配字符串的开始<br>　　$    　　匹配字符串的结束</p><p>　　^\d{5,12}$　　因为使用了^和$，所以检测的整个字符串都要用来和\d{5,12}来匹配，也就是说整个字符串必须是5到12个数字。</p><h3 id="②常用的限定符-表示它前面的字符重复的次数"><a href="#②常用的限定符-表示它前面的字符重复的次数" class="headerlink" title="②常用的限定符 (表示它前面的字符重复的次数)"></a>②常用的限定符 (表示它前面的字符重复的次数)</h3><p>　　代码　　说明<br>　　*    　　重复零次或更多次<br>　　+    　　重复一次或更多次<br>　　?    　　重复零次或一次<br>　　{n}　　重复n次<br>　　{n,}　　重复n次或更多次<br>　　{n,m}    　重复n到m次</p><p>　　(?0\d{2}[) -]?\d{8}　　首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现0次或1次(?)，最后是8个数字(\d{8})。</p><h3 id="③字符范围"><a href="#③字符范围" class="headerlink" title="③字符范围"></a>③字符范围</h3><p>　　代码　　说明<br>　　[]　　　　匹配方括号中任意字符<br>　　[0-9]　　代表的含意与\d就是完全一致的：匹配任意一位数字</p><h2 id="④分组"><a href="#④分组" class="headerlink" title="④分组"></a>④分组</h2><p>　　代码　　说明<br>　　()　　重复单个字符,直接在字符后面加上限定符就行了；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了</p><p>　　(\d{1,3}.){3}\d{1,3}　　是一个简单的IP地址匹配表达式。  \d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。</p><p>　　具体请参考：<a href="http://www.jb51.net/tools/zhengze.html" title="快速入门正则表达式" target="_blank" rel="noopener">快速入门正则表达式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;①常用的元字符-一些有特异功能的用来方便匹配的字符&quot;&gt;&lt;a href=&quot;#①常用的元字符-一些有特异功能的用来方便匹配的字符&quot; class=&quot;headerlink&quot; title=&quot;①常用的元字符 (一些有特异功能的用来方便匹配的字符)&quot;&gt;&lt;/a&gt;①常用的元字符 (
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>加载图片的小技巧</title>
    <link href="http://yoursite.com/2018/03/31/%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/03/31/加载图片的小技巧/</id>
    <published>2018-03-31T12:07:52.000Z</published>
    <updated>2018-03-31T12:17:02.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="image的onload事件和complete属性"><a href="#image的onload事件和complete属性" class="headerlink" title="image的onload事件和complete属性"></a>image的onload事件和complete属性</h2><p>　　在做一个”鼠标移过，修改图片路径”作业的时候，想要附加一个功能：即图片不能显示的话，就给把该图片设置为一个替代的loading图片。<br>HTML:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=<span class="string">"first"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"img/big_1.jpg"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"loading"</span> style=<span class="string">"display: none;"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>JS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=1;i&lt;oImg.length;i++)&#123;</span><br><span class="line">oImg[i].onmousemove=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">var img=new Image();</span><br><span class="line">img.src=oImg[0].src=this.src.replace(/small/,<span class="string">"big"</span>);</span><br><span class="line">loading.style.display=<span class="string">"block"</span>;</span><br><span class="line">img.complete?loading.style.display=<span class="string">"none"</span>:oImg[0].onload=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">loading.style.display=<span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　在这里我们可以<strong>用complete来判断图片是否加载完毕</strong>，如果加载完毕，则把loading图片所在的那层隐藏掉。<br>　　如果未加载完毕或遇到错误，则执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oImg[0].onload=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">loading.style.display=<span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　这里<strong>onload事件表示等图片加载完成后要进行的操作</strong>，所以接着上面的逻辑，则可以当图片加载完毕后再把loading图片所在层隐藏，若是图片出现错误，则会一直显示loading图片。</p><p>　　大家可以注意到，代码里使用了<em>new image()</em>方法做图片预加载,用没有挂载到dom树上的img对象请求图片。请求成功后图片会被缓存，这时再给真实img元素的src赋值就可以直接使用缓存的图片了,优点是可以加快页面渲染速度。但只可惜我现在才疏学浅，并没看懂在该例中有啥用。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;image的onload事件和complete属性&quot;&gt;&lt;a href=&quot;#image的onload事件和complete属性&quot; class=&quot;headerlink&quot; title=&quot;image的onload事件和complete属性&quot;&gt;&lt;/a&gt;image的onloa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些零星的JS，CSS知识</title>
    <link href="http://yoursite.com/2018/03/27/%E4%B8%80%E4%BA%9B%E9%9B%B6%E6%98%9F%E7%9A%84JS%EF%BC%8CCSS%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/03/27/一些零星的JS，CSS知识/</id>
    <published>2018-03-27T11:43:45.000Z</published>
    <updated>2018-04-06T09:04:46.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-使用border画三角形"><a href="#CSS-使用border画三角形" class="headerlink" title="CSS 使用border画三角形"></a>CSS 使用border画三角形</h2><p>　　盒模型中上下左右边框交界处呈现平滑的斜线. 利用这个特点, 通过设置不同的上下左右边框宽度或者颜色可以得到小三角, 小梯形等。<a href="http://caibaojian.com/css-border-triangle.html" title="CSS三角形的实现原理及运用" target="_blank" rel="noopener">具体链接</a></p><h2 id="CSS-实现居中的方法"><a href="#CSS-实现居中的方法" class="headerlink" title="CSS 实现居中的方法"></a>CSS 实现居中的方法</h2><h3 id="使用width和margin实现水平居中"><a href="#使用width和margin实现水平居中" class="headerlink" title="使用width和margin实现水平居中"></a>使用width和margin实现水平居中</h3><p>　　width指定完宽度，就可以直接margin:0 auto;实现左右居中了</p><h3 id="使用text-align实现水平居中"><a href="#使用text-align实现水平居中" class="headerlink" title="使用text-align实现水平居中"></a>使用text-align实现水平居中</h3><p>　　使内联元素居中，所以要在想居中的内联元素的父元素中使用</p><h3 id="使用top-left和margin实现水平竖直的居中"><a href="#使用top-left和margin实现水平竖直的居中" class="headerlink" title="使用top,left和margin实现水平竖直的居中"></a>使用top,left和margin实现水平竖直的居中</h3><p>　　方法就是top: 50%;left: 50%;然后margin: -所在盒子宽度/2 0 0 -所在盒子高度/2;(可用于弹窗弹出到页面正中间)</p><h3 id="使用line-height实现文本垂直居中"><a href="#使用line-height实现文本垂直居中" class="headerlink" title="使用line-height实现文本垂直居中"></a>使用line-height实现文本垂直居中</h3><p>　　方法为：把line-height设置为父容器的高度就可以实现文本垂直居中。具体原理请见：<a href="https://www.imooc.com/article/7767" title="CSS行高（line-height）及文本垂直居中原理" target="_blank" rel="noopener">行高原理</a></p><h2 id="js中-大括号-中括号使用详解"><a href="#js中-大括号-中括号使用详解" class="headerlink" title="js中{}大括号,[]中括号使用详解"></a>js中{}大括号,[]中括号使用详解</h2><h3 id="大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。"><a href="#大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。" class="headerlink" title="{ }大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。"></a>{ }大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var mayun=&#123;</span><br><span class="line">name: <span class="string">"cocl"</span>,</span><br><span class="line">age: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">alert(<span class="string">"21"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mayun.age();</span><br></pre></td></tr></table></figure><h3 id="中括号，表示一个数组，也可以理解为一个数组对象。"><a href="#中括号，表示一个数组，也可以理解为一个数组对象。" class="headerlink" title="[ ]中括号，表示一个数组，也可以理解为一个数组对象。"></a>[ ]中括号，表示一个数组，也可以理解为一个数组对象。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS-使用border画三角形&quot;&gt;&lt;a href=&quot;#CSS-使用border画三角形&quot; class=&quot;headerlink&quot; title=&quot;CSS 使用border画三角形&quot;&gt;&lt;/a&gt;CSS 使用border画三角形&lt;/h2&gt;&lt;p&gt;　　盒模型中上下左右边框交界
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS for-in语句的使用</title>
    <link href="http://yoursite.com/2018/03/26/JS-for-in%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/26/JS-for-in语句的使用/</id>
    <published>2018-03-26T11:08:31.000Z</published>
    <updated>2018-03-26T11:22:35.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-for-in语句的使用"><a href="#JS-for-in语句的使用" class="headerlink" title="JS for-in语句的使用"></a>JS for-in语句的使用</h2><p>　　<em>  js中for循环一般用于遍历数组　　</em>  for-in一般用于循环遍历对象的属性<br>　　虽然数组在js中也是对象，技术上说，我们可以使用for-in循环数组，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var oSkin=document.getElementById(<span class="string">"skin"</span>).getElementsByTagName(<span class="string">"LI"</span>);</span><br><span class="line"><span class="keyword">for</span>(var p <span class="keyword">in</span> oSkin)&#123;</span><br><span class="line">alert(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　此时输出(假设oSkin包含了3个LI)为0,1,2,length,item,namedItem，原因为：for-in如果遍历的是数组，那么i是代表这个数组的索引值，如果遍历的是个对象，那么i代表的是这个数组的属性值。因为oSkin是个HTTPCollection对象，所以它是一个对象数组里面装了3个LI对象，于是就会既有索引值，又有它自己的属性。<br>　　所以要想遍历该数组的三个LI，需要：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var p <span class="keyword">in</span> oSkin)&#123;</span><br><span class="line">oSkin[p].doSomeThing();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　题外话：今天在经过了主题制作者大佬的点拨下，准备趁着在学校的最后一个学期用<em>Socket.io+JS</em>写一个<em>聊天室系统</em>，这样也算有个项目可以去实习了哈哈(想的挺美，可惜现在写不出来)，所以还是要务实基础啊，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS-for-in语句的使用&quot;&gt;&lt;a href=&quot;#JS-for-in语句的使用&quot; class=&quot;headerlink&quot; title=&quot;JS for-in语句的使用&quot;&gt;&lt;/a&gt;JS for-in语句的使用&lt;/h2&gt;&lt;p&gt;　　&lt;em&gt;  js中for循环一般用于遍历
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 使用overflow:hidden清除浮动</title>
    <link href="http://yoursite.com/2018/03/26/CSS-%E4%BD%BF%E7%94%A8overflow-hidden%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/03/26/CSS-使用overflow-hidden清除浮动/</id>
    <published>2018-03-26T10:59:09.000Z</published>
    <updated>2018-03-26T11:19:22.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-使用overflow-hidden清除浮动"><a href="#CSS-使用overflow-hidden清除浮动" class="headerlink" title="CSS 使用overflow:hidden清除浮动"></a>CSS 使用overflow:hidden清除浮动</h2><p>　　今天做了一道网页换肤的练习，但发现了其中的两个小问题，详情如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"outer"</span>&gt;</span><br><span class="line">&lt;ul id=<span class="string">"skin"</span>&gt;</span><br><span class="line">&lt;li id=<span class="string">"red"</span> title=<span class="string">"红色"</span>&gt;&lt;/li&gt;</span><br><span class="line">&lt;li id=<span class="string">"green"</span> title=<span class="string">"绿色"</span>&gt;&lt;/li&gt;</span><br><span class="line">&lt;li id=<span class="string">"blue"</span> title=<span class="string">"蓝色"</span>&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul id=<span class="string">"nav"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">               javascript: 是一个伪协议javascript:是表示在触发&lt;a&gt;默认动作时，执行一段JavaScript代码，</span><br><span class="line">               而 javascript:;表示什么都不执行，这样点击&lt;a&gt;时就没有任何反应。</span><br><span class="line">               --&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;新闻&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;娱乐&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;体育&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;电影&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;音乐&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"javascript:;"</span>&gt;旅游&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>　　在div里有两个ul，对它们的li分别都设置了float: left后发现：<br>　　1.  这两个ul中的li都脱离了文档流，跑到一行上去了<br>　　2.  为ul设置过黑色背景，但都消失了<br>　　于是我使用了br来换行，但发现原作者并没有这样做，这不由得让我产生了疑问。在反复查看源码后，我发现是overflow: hidden;在起作用，遂到网上一查发现，它并不只有<strong>隐藏溢出</strong>的功能，还有<strong>清除浮动</strong>和<strong>解除坍塌</strong>的功能。原理如下：<br>　　浮动的元素(两个ul中的li)脱离文档元素， 不占据空间，所以跑到了一行上。 不浮动的元素(ul,div)会直接无视掉这个元素。因为我们没有设置父ul的高度，父ul无视了自己的两个孩子，其高度变为0，所以父ul没有显现。 解决方法就是：<br>　　1.  如果只想换行，给ul添加overflow:hidden属性即可，清除浮动，恢复它原先占据的ul的位置<br>　　2.  为父ul添加overflow:hidden属性用以清除浮动，使得父ul显现</p><p>　　若想更细致的查看该属性的用法：<a href="https://blog.csdn.net/hukaihe/article/details/51298665" title="深入理解：overflow:hidden——溢出,坍塌,清除浮动" target="_blank" rel="noopener">详细链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS-使用overflow-hidden清除浮动&quot;&gt;&lt;a href=&quot;#CSS-使用overflow-hidden清除浮动&quot; class=&quot;headerlink&quot; title=&quot;CSS 使用overflow:hidden清除浮动&quot;&gt;&lt;/a&gt;CSS 使用overf
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS中&amp;&amp;和||的奇怪用法</title>
    <link href="http://yoursite.com/2018/03/25/JS%E4%B8%AD-%E5%92%8C-%E7%9A%84%E5%A5%87%E6%80%AA%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/03/25/JS中-和-的奇怪用法/</id>
    <published>2018-03-25T08:15:19.000Z</published>
    <updated>2018-04-03T14:24:40.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS中-amp-amp-和-的奇怪用法"><a href="#JS中-amp-amp-和-的奇怪用法" class="headerlink" title="JS中&amp;&amp;和||的奇怪用法"></a>JS中&amp;&amp;和||的奇怪用法</h2><p>　　最近正在学 JS，找了点练习来做，然后看到如下的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; oBtn.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">oBtn[i].index = i;</span><br><span class="line">oBtn[i].onclick = <span class="keyword">function</span> ()</span><br><span class="line">&#123;</span><br><span class="line">this.index == oBtn.length - 1 &amp;&amp; (oDiv.style.cssText = <span class="string">""</span>);</span><br><span class="line">changeStyle(oDiv, oAtt[this.index], oVal[this.index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　然后我上网搜了一下明白了 var c=a||b;或var c=a&amp;&b;这种情况时<br><strong>a &amp;&amp; b :如果执行 a 后返回 true，则执行 b 并返回 b 的值；如果执行 a 后返回 false，则整个表达式返回 a 的值，b 不执行</strong><br><strong>a || b :如果执行 a 后返回 true，则整个表达式返回 a 的值，b 不执行；如果执行 a 后返回 false，则执行 b 并返回 b 的值</strong></p><p>　　所以这句就好理解了this.index == oBtn.length - 1 &amp;&amp; (oDiv.style.cssText = “”);<br>　　这可以算是一种炫技代码⊙﹏⊙，相当于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(this.index == oBtn.length - 1)&#123;</span><br><span class="line">oDiv.style.cssText = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS中-amp-amp-和-的奇怪用法&quot;&gt;&lt;a href=&quot;#JS中-amp-amp-和-的奇怪用法&quot; class=&quot;headerlink&quot; title=&quot;JS中&amp;amp;&amp;amp;和||的奇怪用法&quot;&gt;&lt;/a&gt;JS中&amp;amp;&amp;amp;和||的奇怪用法&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Front-end newbie</title>
    <link href="http://yoursite.com/2018/03/25/A-Front-end-newbie/"/>
    <id>http://yoursite.com/2018/03/25/A-Front-end-newbie/</id>
    <published>2018-03-25T07:26:03.000Z</published>
    <updated>2018-03-26T11:18:38.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新手上路啦"><a href="#新手上路啦" class="headerlink" title="新手上路啦"></a>新手上路啦</h2><p>　　忙活了三天搭起了个人的博客，虽然只是开了一个框架，但看到属于自己的页面那一刻，心情是很激动的.作为一只准备投身前端领域的小菜鸟，这一个月越发的感受到了前端的魅力，也见识了前端的深邃，自己目前的水平也就是刚对JS和CSS入了门，上论坛看大家讨论的一堆名词连听都没听说过，所以革命还需努力啦！<br>　　鉴于目前已大三下学期，马上就要找实习了，故在文章最后分享一下最近看到一句话：“你第一个月的工资=你之前看过的所有技术性书籍价值的总和”，我感觉这是非常有道理的，小时候读书少，现在有动力读相关技术的书了，也算是一个好兆头。<br>　　最后分享一下搭建博客的过程中用到的教程：<br>　　1.  GitHub搭建博客 <a href="https://blog.csdn.net/u012075670/article/details/54581015" title="如何用github搭建自己的个人网站" target="_blank" rel="noopener">具体教程</a><br>　　2.  Hexo完善博客       <a href="https://www.cnblogs.com/visugar/p/6821777.html" title="hexo从零开始到搭建完整" target="_blank" rel="noopener">具体教程</a><br>　　3.  使用markdown来写博客(ps:要是想要段首缩进可以切换到输入法全角模式打两个空格) <a href="https://www.w3cschool.cn/markdownyfsm/cbx1e7.html" title="Markdown 语法说明" target="_blank" rel="noopener">语法参考</a><br>　　那今天就先到这里啦，我们下篇博客再会！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新手上路啦&quot;&gt;&lt;a href=&quot;#新手上路啦&quot; class=&quot;headerlink&quot; title=&quot;新手上路啦&quot;&gt;&lt;/a&gt;新手上路啦&lt;/h2&gt;&lt;p&gt;　　忙活了三天搭起了个人的博客，虽然只是开了一个框架，但看到属于自己的页面那一刻，心情是很激动的.作为一只准备投身前
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/24/hello-world/"/>
    <id>http://yoursite.com/2018/03/24/hello-world/</id>
    <published>2018-03-24T12:45:44.081Z</published>
    <updated>2018-03-26T11:24:04.631Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate or $ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Server</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy or $ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
